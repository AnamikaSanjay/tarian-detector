// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package network_accept

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type acceptEventData struct{ Args [3]uint64 }

// loadAccept returns the embedded CollectionSpec for accept.
func loadAccept() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AcceptBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load accept: %w", err)
	}

	return spec, err
}

// loadAcceptObjects loads accept and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*acceptObjects
//	*acceptPrograms
//	*acceptMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAcceptObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAccept()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// acceptSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptSpecs struct {
	acceptProgramSpecs
	acceptMapSpecs
}

// acceptSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptProgramSpecs struct {
	KprobeAccept *ebpf.ProgramSpec `ebpf:"kprobe_accept"`
}

// acceptMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type acceptMapSpecs struct {
	Event *ebpf.MapSpec `ebpf:"event"`
}

// acceptObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAcceptObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptObjects struct {
	acceptPrograms
	acceptMaps
}

func (o *acceptObjects) Close() error {
	return _AcceptClose(
		&o.acceptPrograms,
		&o.acceptMaps,
	)
}

// acceptMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAcceptObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptMaps struct {
	Event *ebpf.Map `ebpf:"event"`
}

func (m *acceptMaps) Close() error {
	return _AcceptClose(
		m.Event,
	)
}

// acceptPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAcceptObjects or ebpf.CollectionSpec.LoadAndAssign.
type acceptPrograms struct {
	KprobeAccept *ebpf.Program `ebpf:"kprobe_accept"`
}

func (p *acceptPrograms) Close() error {
	return _AcceptClose(
		p.KprobeAccept,
	)
}

func _AcceptClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed accept_bpfel_x86.o
var _AcceptBytes []byte
