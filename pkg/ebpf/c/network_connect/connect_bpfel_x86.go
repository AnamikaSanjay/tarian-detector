// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package network_connect

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type connectEventData struct{ Args [3]uint64 }

// loadConnect returns the embedded CollectionSpec for connect.
func loadConnect() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ConnectBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load connect: %w", err)
	}

	return spec, err
}

// loadConnectObjects loads connect and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*connectObjects
//	*connectPrograms
//	*connectMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadConnectObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadConnect()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// connectSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type connectSpecs struct {
	connectProgramSpecs
	connectMapSpecs
}

// connectSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type connectProgramSpecs struct {
	KprobeConnect *ebpf.ProgramSpec `ebpf:"kprobe_connect"`
}

// connectMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type connectMapSpecs struct {
	Event *ebpf.MapSpec `ebpf:"event"`
}

// connectObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type connectObjects struct {
	connectPrograms
	connectMaps
}

func (o *connectObjects) Close() error {
	return _ConnectClose(
		&o.connectPrograms,
		&o.connectMaps,
	)
}

// connectMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type connectMaps struct {
	Event *ebpf.Map `ebpf:"event"`
}

func (m *connectMaps) Close() error {
	return _ConnectClose(
		m.Event,
	)
}

// connectPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type connectPrograms struct {
	KprobeConnect *ebpf.Program `ebpf:"kprobe_connect"`
}

func (p *connectPrograms) Close() error {
	return _ConnectClose(
		p.KprobeConnect,
	)
}

func _ConnectClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed connect_bpfel_x86.o
var _ConnectBytes []byte
